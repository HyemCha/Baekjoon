package day0812;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class B1991_BinaryTree {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		
		
		LinkedBinaryTree lbt = new LinkedBinaryTree();
		Node[] node = new Node[t];
		for(int i=0; i<t; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			node[i] = lbt.makeBinaryTree(st.nextElement(), (Node)st.nextElement(), (Node)st.nextElement());
		}
		
		lbt.PreOrder(node[0]);
		lbt.InOrder(node[0]);
		lbt.PostOrder(node[0]);
		
	}

}

class Node{
	private String data;
	Node left;
	Node right;
	
	public Node(String data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class LinkedBinaryTree{
	public Node makeBinaryTree(String data, Node left, Node right) {
		Node node = new Node(data);
		node.left = left;
		node.right = right;
		return node;
	}
	
	public void visit(String node) {
		if(node != null)
			System.out.println(node);
	}
	
	//전위 순회 (Preorder Traversal)
	public void PreOrder(String node) {
		visit(node);
		PreOrder(node.left);
		PreOrder(node.right);
	}
	
	//중위 순회 (Inorder Traversal)
	public void InOrder(String node) {
		InOrder(node.left);
		visit(node);
		InOrder(node.right);
	}
	
	//후위 순회 (Postorder Traversal)
	public void PostOrder(String node) {
		PostOrder(node.left);
		PostOrder(node.right);
		visit(node);
	}
}