package day0812;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class B1991_BinaryTree {

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		
		
		LinkedBinaryTree lbt = new LinkedBinaryTree();
		Node[] node = new Node[t];
		for(int i=0; i<t; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			
			lbt.makeBinaryTree(st.nextToken(), st.nextToken(), st.nextToken());
			
		}
		
		lbt.PreOrder(lbt.root);
		lbt.InOrder(lbt.root);
		lbt.PostOrder(lbt.root);
		
	}

}

class Node{
	String data;
	Node left;
	Node right;
	
	public Node(String data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class LinkedBinaryTree{
	Node root;
	public Node makeBinaryTree(String data, String left, String right) {
		Node node = new Node(data);
		node.left = new Node(left);
		node.right = new Node(right);
		return node;
	}
	
	
	void search(Node root, String data, String left, String right) {
		if(root == null) 
			return;
		if(root.data == data) {
			if(left!=".")
				root.left = new Node(left);
			if(right!=".")
				root.right = new Node(right);
		}else {
			search(root.left,data,leftData,rightData);
			search(root.right,data,leftData,rightData);
		}
	}
	
	public void visit(Node node) {
		if(node != null)
			System.out.println(node);
	}
	
	//전위 순회 (PreOrder Traversal)
	public void PreOrder(Node node) {
		visit(node);
		if(node.left!=null) PreOrder(node.left);
		if(node.right!=null) PreOrder(node.right);
	}
	
	//중위 순회 (InOrder Traversal)
	public void InOrder(Node node) {
		if(node.left!=null) InOrder(node.left);
		visit(node);
		if(node.right!=null) InOrder(node.right);
	}
	
	//후위 순회 (PostOrder Traversal)
	public void PostOrder(Node node) {
		if(node.left!=null) PostOrder(node.left);
		if(node.right!=null) PostOrder(node.right);
		visit(node);
	}
}